#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
A lorem ipsum generator for the terminal.

Run lorem -h for more details.
"""

SHORTNAME = "lorem"
PROGRAM = "Lorem Ipsum Generator (%s)" % SHORTNAME
VERSION = "0.7.3"
COPYR = "Copyright (C) 2014 Per Erik Strandberg"
GPLV3 = """This is free software, and you are welcome to redistribute it
under the GNU General Public License 3+ <http://www.gnu.org/licenses/gpl.html>
%s comes with NO WARRANTY, to the extent permitted by law.""" % SHORTNAME

# Copyright 2007 Per Erik Strandberg: <per9000 at gmail dot com>
#
# This program is free software you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

# Thanks to
#  * Barre, for the n overflow solution
#  * http://lipsum.sourceforge.net/whatis.php for source lorems and inspiration
#    (of initial lorem implementation)
#  * The EMACS spook function

from argparse import ArgumentParser
from random import shuffle, choice


def get_quote(source=None, idx=None):
    """Get a quote"""
    i = 0

    if source in ['cicero', 'lorem'] or idx == i:
        # http://en.wikisource.org/wiki/Lorem_ipsum
        # De finibus bonorum et malorum, by Marcus Tullius Cicero, 45 BCE
        return """Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui."""

    i += 1
    if source in ['boccaccio', 'decameron', 'decamerone'] or idx == i:
        # http://it.wikisource.org/wiki/Decameron/1a_giornata/Novella_Prima
        # The Decameron, by Giovanni Boccaccio, 1340-1350
        return """Ser Cepperello con una falsa confessione inganna uno santo frate, e muorsi; ed essendo stato un pessimo uomo in vita, è morto reputato per santo e chiamato san Ciappelletto.

Convenevole cosa è, carissime donne, che ciascheduna cosa la quale l’uomo fa, dallo ammirabile e santo nome di Colui il quale di tutte fu facitore le dea principio. Per che, dovendo io al nostro novellare, sì come primo, dare cominciamento, intendo da una delle sue maravigliose cose incominciare, acciò che, quella udita, la nostra speranza in lui, sì come in cosa impermutabile, si fermi e sempre sia da noi il suo nome lodato.

Manifesta cosa è che, sì come le cose temporali tutte sono transitorie e mortali, così in sé e fuor di sé essere piene di noia e d’angoscia e di fatica e ad infiniti pericoli soggiacere; alle quali senza niuno fallo né potremmo noi, che viviamo mescolati in esse e che siamo parte d’esse, durare né ripararci, se spezial grazia di Dio forza e avvedimento non ci prestasse. La quale a noi e in noi non è da credere che per alcuno nostro merito discenda, ma dalla sua propia benignità mossa e da prieghi di coloro impetrata che, sì come noi siamo, furon mortali, e bene i suoi piaceri mentre furono in vita seguendo, ora con lui etterni sono divenuti e beati; alli quali noi medesimi, sì come a procuratori informati per esperienza della nostra fragilità, forse non audaci di porgere i prieghi nostri nel cospetto di tanto giudice, delle cose le quali a noi reputiamo opportune gli porgiamo."""

    i += 1
    if source in ['goethe', 'faust'] or idx == i:
        # Faust - Der Tragödie erster Teil, by Johann Wolfgang von Goethe, 1808
        # http://de.wikisource.org/wiki/Faust_-_Der_Trag%C3%B6die_erster_Teil
        return """Ihr naht euch wieder, schwankende Gestalten!
Die früh sich einst dem trüben Blick gezeigt.
Versuch’ ich wohl euch diesmal fest zu halten?
Fühl’ ich mein Herz noch jenem Wahn geneigt?
Ihr drängt euch zu! nun gut, so mögt ihr walten.
Wie ihr aus Dunst und Nebel um mich steigt.
Mein Busen fühlt sich jugendlich erschüttert.
Vom Zauberhauch der euren Zug umwittert.

Ihr bringt mit euch die Bilder froher Tage.
Und manche liebe Schatten steigen auf
Gleich einer alten, halbverklungnen Sage.
Kommt erste Lieb’ und Freundschaft mit herauf
Der Schmerz wird neu, es wiederholt die Klage.
Des Lebens labyrinthisch irren Lauf,
Und nennt die Guten, die, um schöne Stunden
Vom Glück getäuscht, vor mir hinweggeschwunden.
"""

    i += 1
    if source in ['beaudelaire', 'flowers', 'fleurs'] or idx == i:
        # http://fr.wikisource.org/wiki/Les_Fleurs_du_mal/1857
        # Les Fleurs du mal, by Charles Baudelaire, 1857
        return """Lorsque, par un décret des puissances suprêmes,
Le Poète apparaît en ce monde ennuyé,
Sa mère épouvantée et pleine de blasphèmes
Crispe ses poings vers Dieu qui la prend en pitié.

—Ah! Que n’ai-je mis bas tout un nœud de vipères,
Plutôt que de nourrir cette dérision!
Maudite soit la nuit aux plaisirs éphémères
Où mon ventre a conçu mon expiation!

Puisque tu m’as choisie entre toutes les femmes
Pour être le dégoût de mon triste mari.
Et que je ne puis pas rejeter dans les flammes,
Comme un billet d’amour, ce monstre rabougri.

Je ferai rejaillir ta haine qui m’accable
Sur l’instrument maudit de tes méchancetés,
Et je tordrai si bien cet arbre misérable
Qu’il ne pourra pousser ses boutons empestés!"""

    i += 1
    if source in ['strindberg', 'hemsöborna', 'hemsoborna'] or idx == i:
        # http://runeberg.org/strindbg/hemsobor/
        # Hemsöborna by August Strindberg, 1914
        return """Han kom som ett yrväder en aprilafton och hade ett höganäskrus i en svångrem om halsen. Clara och Lotten voro inne med sköt-ekan att hämta honom på Dalarö brygga; men det dröjde evigheter, innan de kommo i båt. De skulle till handelsman och ha en tunna tjära och på abeteket och hämta gråsalva åt grisen, och så skulle de på posten och få ett frimärke, och så skulle de ner till Fia Lövström i Kroken och låna tuppen mot ett halvpund småtärna till notbygget, och sist hade de hamnat på gästgivaregården, där Carlsson bjudit på kaffe med dopp. Och så kommo de äntligen i båt, men Carlsson ville styra, och det kunde han inte, för han hade aldrig sett en råseglare förr, och därför skrek han, att de skulle hissa focken, som inte fanns.

Och på tullbryggan stodo lotsar och vaktmästare och grinade åt manövern, när ekan gick över stag och länsade ner åt Saltsäcken.

-Hörru, du har hål i båten! skrek en lotslärling genom vinden; -  stopp till! stopp till! och medan Carlsson tittade efter hålen, hade Clara knuffat undan honom och tagit roret, och med årorna lyckades Lotten få ekan opp i vinden igen, så att nu strök det ner åt Aspösund med god gång.

Carlsson var en liten fyrkantig värmländing med blå ögon och näsa krokig som en syskonhake. Livlig, lekfull och nyfiken var han, men sjöaffärerna förstod han inte alls, och han var också kallad ut till Hemsö för att ta hand om åker och kreatur, som ingen annan ville ta befattning med, sedan gubben Flod gått ur livet och änkan satt ensam vid gården.

Men när Carlsson nu ville börja pumpa flickorna om ställningar och förhållanden, så fick han riktiga skärkarlssvar.

-Ja si, det vet jag inte! Ja si, det kan jag inte säga! Ja si, det vet jag rakt inte."""

    i += 1
    if source in ['strandberg', 'foo'] or idx == i:
        # I made this up - hereby donated to the public domain
        # Foo Bar Baz, by Per Erik Strandberg, 2014
        return """Foo. Foo hoo? Foo bar. Foo bar, baz. Baz? Foo bar, baz."""

    return """Asset csystems BATF Blowpipe Soviet South Africa wire transfer.
NSA event security Compsec spies benelux Sears Tower airframe red noise.

Commecen Steve Case SCUD missile Kosovo quarter bce Bellcore SAPO.
Asset IRA TWA rail gun CDMA embassy USCODE.

Bin Laden analyzer S Key ASIO espionage South Africa Ermes ASDIC NASA.
MP5K-SD Etacs plutonium Putin Tony Blair corporate security.

Telex ANDVT MD5 kilderkin Comirex strategic AIMSX Hugo Chavez Rubin.
Medco PGP asset EuroFed Area 51 64 Vauxhall Cross.

Yukon Gazprom Crypto AG quiche secure COSCO Belknap Elvis MD5 Kh-11.
MD2 PGP Nazi Abu Ghraib Lon Horiuchi.

Crowell Treasury pink noise strategic LLNL airframe embassy MP5K-SD.
Mafia Forte e-bomb quarter Dateline kibo Janet Reno.

Reno Bellcore kibo AVN NATO counter terrorism Downing Street Kennedy.
ANZUS Merlin Dick Cheney Janet Reno doctrine Albanian AFSPC.

David John Oates event security csim Ft. Knox Forte crypto anarchy spy.
Nuclear PLO basement MILSATCOM genetic 9/11 PET Crypto AG.

Freeh Bellcore unclassified. Hello to all my friends and fans in
domestic surveillance. Saudi Arabia Panama secure EuroFed MP5K-SD Bush.
Wired Marxist pre-emptive FBI Europol embassy."""


def parse_args(arguments=None):
    """
    Parse command line argumets, or the given string
        >>> opt = parse_args(['-n', '3'])
        >>> opt.words == 3
        True
    """
    desc = "%s - Create more or less random lorem ipsum text." % SHORTNAME
    vinfo = "%s version %s\n\n%s\n\n%s" % (PROGRAM, VERSION, COPYR, GPLV3)

    parser = ArgumentParser(description=desc)
    parser.add_argument('-v', '--version', action='store_const',
                        help="show program's version number and exit",
                        const=vinfo)
    parser.add_argument('-t', action='store_true',
                        help='run self-tests and exit')

    ogroup = parser.add_argument_group('output format (mutually exclusive)')
    ogroup.add_argument('--words', '-n', action='store', type=int, metavar='N',
                        help='number of words')
    ogroup.add_argument('--sentences', '-s', action='store', type=int,
                        metavar='S', help='number of sentences')
    ogroup.add_argument('--lines', '-l', action='store', type=int, metavar='L',
                        help='number of lines')
    ogroup.add_argument('--chars', '-c', action='store', type=int, metavar='C',
                        help='number of characters (excl. final newline)')

    qgroup = parser.add_argument_group('qoute selection')
    qgroup.add_argument('--lorem', '--cicero', action='store_const',
                        const='lorem', dest='source', default='lorem',
                        help='"Lorem ipsum dolor sit amet..."')
    qgroup.add_argument('--decamerone', '--boccaccio', dest='source',
                        action='store_const', const='decamerone',
                        help='"Ser Cepperello con una falsa confessione..."')
    qgroup.add_argument('--faust', '--goethe', action='store_const',
                        const='faust', dest='source',
                        help='"Ihr naht euch wieder..."')
    qgroup.add_argument('--fleurs', '--beaudelaire', dest='source',
                        action='store_const', const='fleurs',
                        help='"Lorsque, par un décret..."')
    qgroup.add_argument('--strindberg', '--hemsöborna', dest='source',
                        action='store_const', const='strindberg',
                        help='"Han kom som ett yrväder en aprilafton..."')
    qgroup.add_argument('--spook', '--emacs', dest='source',
                        action='store_const', const='spook',
                        help='"Asset csystems BATF Blowpipe Soviet..."')
    qgroup.add_argument('--strandberg', '--foo', dest='source',
                        action='store_const', const='strandberg',
                        help='"Foo. Foo hoo? Foo bar. Foo bar, baz..."')
    qgroup.add_argument('-q', '--quote', action='store', type=int, metavar='Q',
                        help='select source by index instead, q = 1, 2, ...')

    sgroup = parser.add_argument_group('options for sentences')
    sgroup.add_argument('--lower', action='store_const', dest='case',
                        const='lower', default=None,
                        help='all lower case (default false)')
    sgroup.add_argument('--upper', action='store_const', dest='case',
                        const='upper', default=None,
                        help='all upper case (default false)')
    sgroup.add_argument('--randomize', action='store_true',
                        help='randomize order (default false)')

    if arguments:
        opt = parser.parse_args(arguments)
    else:
        opt = parser.parse_args()
    check_args(parser, opt)
    return opt


def check_args(parser, opt):
    """Raise parser.error if needed or not."""
    if not opt.chars and not opt.words and not opt.lines and not opt.sentences:
        opt.word = 5

    for arg in [opt.chars, opt.words, opt.lines, opt.sentences]:
        if arg is not None and arg < 0:
            parser.error("Only non-negative values are allowed.")

    if sum([bool(arg is not None) for arg in [opt.chars, opt.words, opt.lines,
                                              opt.sentences]]) > 1:
        parser.error("Use only one of chars, words, lines or sentences.")
    return


def randomize(lorem):
    """Randomize the order of the lorem."""
    words = lorem.split(' ')
    shuffle(words)
    words[0] = words[0][0].upper() + words[0][1:]
    return ' '.join(words)


def do_case(lorem, case):
    """Set upper or lower case, or do nothing"""
    if case == 'upper':
        return lorem.upper()
    elif case == 'lower':
        return lorem.lower()
    return lorem


def no_linebreaks(lorem):
    """Remove the new line chars."""
    lorem = lorem.replace('\n', ' ')
    lorem = lorem.replace('  ', ' ')
    lorem = lorem.replace('  ', ' ')
    return lorem


def get_sentences(lorem, n):
    """Get n sentences"""
    lorem = no_linebreaks(lorem)

    m = 0
    seps = ['.', ';', '!', '?']
    for sep in seps:
        lorem = lorem.replace(sep, '|')
    sentences = lorem.split('|')[:-1]

    output = list()
    while (m < n) and ((n-m) > len(sentences)):
        output += sentences
        m += len(sentences)

    output += sentences[0:n-m]

    lorem = ""
    for sentence in output:
        sentence = sentence.strip()
        lorem += sentence[0].upper() + sentence[1:] + choice(seps) + " "
    lorem = lorem.rstrip()
    return lorem


def get_lines(lorem, n):
    """Get n lines"""

    lorem = lorem.replace('\n\n', '\n')
    lines = lorem.split('\n')
    m = 0

    output = list()
    while (m < n) and ((n-m) > len(lines)):
        output += lines
        m += len(lines)

    output += lines[0:n-m]

    lorem = '\n'.join(output).rstrip()
    return lorem


def get_words(lorem, n):
    """Get n words"""
    lorem = no_linebreaks(lorem).rstrip()
    words = lorem.split(' ')
    m = 0
    output = list()

    while (m < n) and ((n-m) > len(words)):
        output += words
        m += len(words)

    output += words[0:n-m]
    return ' '.join(output)


def get_chars(lorem, n):
    """Get n chars."""
    lorem = no_linebreaks(lorem).rstrip() + ' '
    m = 0
    output = ''

    while (m < n) and ((n-m) > len(lorem)):
        output += lorem
        m += len(lorem)

    output += lorem[0:n-m]
    return output


def do_lorem(opt):
    """Get the lorem and apply the arguments"""
    lorem = get_quote(opt.source)
    if opt.randomize:
        lorem = randomize(lorem)

    if opt.sentences is not None:
        lorem = get_sentences(lorem, opt.sentences)
    elif opt.chars is not None:
        lorem = get_chars(lorem, opt.chars)
    elif opt.words is not None:
        lorem = get_words(lorem, opt.words)
    elif opt.lines is not None:
        lorem = get_lines(lorem, opt.lines)

    return do_case(lorem, opt.case)


if __name__ == '__main__':
    my_args = parse_args()
    if my_args.t:
        import doctest
        res = doctest.testmod()
        print "Tested %s cases, %s failed." % (res.attempted, res.failed)
    elif my_args.version:
        # prevent white space elimination
        print my_args.version
    else:
        print do_lorem(my_args)
